<?php
/**
 * This file contains definition of FactRepository class
 * 
 * PHP Version: 8+
 * 
 * @category Repository
 * 
 * @package App\Repository
 * 
 * @author Kiril Savchev <k.savchev@gmail.com>
 * 
 * @license https://opensource.org/licenses/BSD-3-Clause BSD-3
 * 
 * @link https://github.com/img-academy-bg IMG Academy
 */

namespace App\Repository;

use App\Model\FactCollection;
use App\Model\Fact;
use App\Model\Status;
use App\Model\User;
use App\Exception\HttpResponseException;
use App\Exception\InvalidResponseBodyException;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamInterface;
use GuzzleHttp\Psr7\Request;
use stdClass;
use DateTimeImmutable;

/**
 * Class FactRepository
 * 
 * Loads Fact models with information from the remote Animal Facts API
 *
 * @category Repository
 * 
 * @package App\Repository
 * 
 * @author Kiril Savchev <k.savchev@gmail.com>
 * 
 * @license https://opensource.org/licenses/BSD-3-Clause BSD-3
 * 
 * @link https://github.com/img-academy-bg IMG Academy
 */
class FactRepository
{

    /**
     * The HTTP client object
     * 
     * @var ClientInterface
     */
    protected ClientInterface $httpClient;

    /**
     * The base API URL
     *
     * @var string
     */
    protected string $baseUrl;

    /**
     * Creates new FactRepository object
     *
     * @param ClientInterface $httpClient HTTP client which loads the info
     * @param string          $baseUrl    The API base URL
     */
    public function __construct(ClientInterface $httpClient, string $baseUrl)
    {
        $this->httpClient = $httpClient;
        $this->baseUrl = $baseUrl;
    }

    /**
     * Loads a list with Fact objects
     *
     * @param int    $amount     The amount of facts that should be loaded
     * @param string $animalType The animal type. Default is Fact::CAT
     * 
     * @return FactCollection
     */
    public function getRandomList(
        int $amount = 1,
        string $animalType = Fact::CAT
    ): FactCollection {
        $request = $this->createRequest(
            $this->baseUrl . '/facts/random', [
                'amount' => $amount,
                'animal_type' => $animalType,
            ]
        );
        $response = $this->httpClient->sendRequest($request);
        $this->ensureHttpResponseIsOK($response);
        $body = $this->decodeResponseBody($response->getBody());
        $collection = new FactCollection();
        if (is_array($body)) {
            foreach ($body as $object) {
                $collection->append($this->createFact($object));
            }
        } else {
            $collection->append($this->createFact($body));
        }
        return $collection;
    }

    /**
     * Loads single fact by its id
     * 
     * @param string $id The identifier of the fact that should be loaded
     * 
     * @return Fact
     */
    public function getFact(string $id): Fact
    {
        $request = $this->createRequest($this->baseUrl . '/facts/' . $id);
        $response = $this->httpClient->sendRequest($request);
        $this->ensureHttpResponseIsOK($response);
        $body = $this->decodeResponseBody($response->getBody());

        return $this->createFact($body);
    }

    /**
     * Creates the PSR HTTP request object
     * 
     * @param string $endpoint The API endpoint that must be called
     * @param array  $params   Query parameters for the URL
     * 
     * @return RequestInterface
     */
    protected function createRequest(
        string $endpoint,
        array $params = []
    ): RequestInterface {
        return new Request('GET', $endpoint . '?' . http_build_query($params));
    }

    /**
     * Ensures the response status is OK
     *
     * @param ResponseInterface $response The response object
     * 
     * @return void No returned value
     * 
     * @throws HttpResponseException
     */
    protected function ensureHttpResponseIsOK(ResponseInterface $response): void
    {
        if ($response->getStatusCode() !== 200) {
            $msg = 'HTTP request failed with status %d';
            throw new HttpResponseException(
                sprintf(
                    $msg, $response->getStatusCode()
                )
            );
        }
    }

    /**
     * Decodes the response body
     * 
     * @param StreamInterface $body The response body for decoding
     * 
     * @return array|stdClass
     * 
     * @throws InvalidResponseBodyException
     */
    protected function decodeResponseBody(StreamInterface $body)
    {
        try {
            return json_decode($body . '', false, 512, JSON_THROW_ON_ERROR);
        } catch (\Exception $ex) {
            throw new InvalidResponseBodyException(
                'Cannot decode response body',
                json_last_error(), 
                $ex
            );
        }
    }

    /**
     * Creates Fact object from stdClass
     *
     * @param stdClass $object The values that will be added to the Fact object
     * 
     * @return Fact
     */
    protected function createFact(stdClass $object): Fact
    {
        $fact = new Fact();
        $fact->setId($object->_id)
            ->setText($object->text)
            ->setType($object->type);
        $fact->setCreatedAt(
            DateTimeImmutable::createFromFormat(
                'Y-m-d\TH:i:s\.v\Z',
                $object->createdAt
            )
        );
        $fact->setUpdatedAt(
            DateTimeImmutable::createFromFormat(
                'Y-m-d\TH:i:s\.v\Z', 
                $object->updatedAt
            )
        );
        if ($object->status && $object->status instanceof stdClass) {
            $status = new Status(
                $object->status->verified,
                $object->status->sentCount
            );
            $fact->setStatus($status);
        }
        if ($object->user instanceof stdClass) {
            $user = new User(
                $object->user->_id,
                $object->user->photo,
                [
                    'first' => $object->user->name->first, 
                    'last' => $object->user->name->last
                ]
            );
            $fact->setAuthor($user);
        } else {
            $fact->setUser($object->user);
        }

        return $fact;
    }
}
